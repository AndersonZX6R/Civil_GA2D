#pragma hdrstop

#include "Civil_Math.h"
#pragma package(smart_init)

#include <math.h>
#include <cmath>

using namespace std;

namespace Civil
{

namespace MATH
{

void
Angle::calcRadians()
{
	m_dblRadians = m_degrees + (m_minutes / 60) + (m_seconds / 3600);
	m_dblRadians = M_PI * (m_dblRadians / 180);
}

void
Angle::calcDegrees()
{
	double
		dblDecimal = m_dblRadians;

	if (dblDecimal < 0)
		dblDecimal = M_PI - dblDecimal;

	dblDecimal = (dblDecimal / M_PI) * 180;

	double
		dblBff = dblDecimal / 360;

	if (dblBff > 1)
	{
		float
			dblInteiro,
			dblFracao;

		dblFracao = modf(dblBff, &dblInteiro);
		dblDecimal = (dblDecimal - dblInteiro * 360) * dblFracao;
	}

	double
		dblMinute;

	m_degrees = (int) trunc(dblDecimal);
	dblMinute = (dblDecimal - m_degrees) * 60;
	m_minutes = trunc(dblMinute);
	m_seconds = trunc((dblMinute - m_minutes) * 60);
}

} // namespace MATH

} // namespace Civil
